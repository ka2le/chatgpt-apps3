javascript:(function() {!function(){function e(e,t,n){var o=document.getElementsByTagName("head")[0],a=document.createElement("script");a.type="text/javascript",a.onerror=function(){var e;t&&((e=document.createElement("script")).type="text/javascript",e.src=t,e.onreadystatechange=n,e.onload=n,o.appendChild(e))},a.src=e,a.onreadystatechange=n,a.onload=n,o.appendChild(a)}console.log("GPT MAIN: 1686130726519");var t="http://localhost:3000/chatgpt-apps3/bookmarklets/min/utils.min.js?"+(new Date).getTime(),n="https://ka2le.github.io/chatgpt-apps3/bookmarklets/min/utils.min.js?"+(new Date).getTime();e("https://unpkg.com/preact@latest/dist/preact.umd.js",null,function(){e("https://unpkg.com/htm@latest/dist/htm.umd.js",null,function(){e("https://unpkg.com/preact@latest/hooks/dist/hooks.umd.js",null,function(){window.h=preact.h,window.render=preact.render,window.html=htm.bind(h),window.useState=preactHooks.useState,window.useEffect=preactHooks.useEffect,window.useRef=preactHooks.useRef,window.useMemo=preactHooks.useMemo,window.useCallback=preactHooks.useCallback,e(t,n,function(){n=window.render,r=window.html,d=window.useState,c=window.useEffect,window.useRef,u=window.useMemo,window.useCallback;var n,r,d,c,u,e=function(){const e=["ALL","DND","CODE"],[t,n]=d("ALL"),[o,a]=d(!1),[i,l]=d(!1),s=u(()=>({availableModes:e,mode:t,setMode:n,haveRemoved:o,setHaveRemoved:a,triggerRender:i,...useTextArea(),...useSendButton(),...function(){const[t,n]=d({STR:0,DEX:0,CON:0,INT:0,WIS:0,CHA:0}),[o,a]=d(""),[i,l]=d(""),[s,e]=d("");return{standardAbilities:["STR","DEX","CON","INT","WIS","CHA"],standardScoreOptions:[-2,-1,0,1,2,3,4,5],abilityScores:t,setAbilityScores:n,saveCharacter:()=>{var e={abilityScores:t,description:o,questDescription:i};console.log(s+" Saving with: "+JSON.stringify(e)),localStorage.setItem("CHARACTER_"+s,JSON.stringify(e))},loadCharacter:()=>{var e=JSON.parse(localStorage.getItem("CHARACTER_"+s));e?(n(e.abilityScores),a(e.description),l(e.questDescription)):alert("No saved data for this character")},getStoredCharacters:()=>{var e=Object.keys(localStorage);return e&&1<e.length?e.filter(e=>e.startsWith("CHARACTER_")).map(e=>e.split("_")[1]).filter(function(e){if(null!=e&&"null"!=e)return e}):[""]},characterName:s,setCharacterName:e,description:o,setDescription:a,questDescription:i,setQuestDescription:l}}(),...useContainerVisibility(t)}),[e,t,o,i]);return useComponentContainer(h,findToolBarContainerDOM,s),useComponentContainer(y,findOverlayContainerDOM,s),useComponentContainer(v,findOverlayContainerDOM,s),c(function(){removeElementsByClass("gpt-enhancer",o,a),g(),p(),s.sendButtonClickListener(),addClassObserver([function(){console.log("Callbak from Class Observer function running")},function(){p()},function(){g()},function(){addStyling()},function(){l(e=>!e)}]),addObserver([function(){console.log("Callbak function running")},function(){g()},function(){p()},function(){addStyling()},function(){l(e=>!e)}]),addStyling()},[o,l,i]),r`<${function(e){return r`
                <div 
                style=${{display:e.isToolWindowVisible?"block":"none",...utilVars.toolWindowStyle}}
                    id="toolWindow"
                    class="gpt-enhancer group  w-full text-gray-800 dark:text-gray-100 border-b border-black/10 dark:border-gray-900/50 dark:bg-gray-800">
                    <div><h2>toolWindow</h2></div>
                    <${f}
                        id="codeBox"
                        class="flex flex-col w-full py-[10px] flex-grow md:py-4 md:pl-4 relative border border-black/10 bg-white dark:border-gray-900/50 dark:text-white dark:bg-gray-700 rounded-xl shadow-xs dark:shadow-xs"
                        style=""
                    />${Button("RunJS",m)}
                </div>
            `}} ...${s} />`},t="gpt-enhancer-root",o=(o=t,(o=document.getElementById(o))&&o.remove(),document.createElement("div"));function p(){for(var e=document.getElementsByTagName("main")[0].getElementsByTagName("ol"),t=0;t<e.length;t++)for(var n,o,a,i=e[t].getElementsByTagName("li"),l=0;l<i.length;l++)i[l].classList.contains("has-checkbox")||((n=document.createElement("input")).type="checkbox",o=l+1,a=i[l].innerHTML.replace(/<[^>]*>?/gm,""),n.dataset.listText="Option "+o+": "+a,i[l].style.display="flex",i[l].style.alignItems="center",i[l].insertBefore(n,i[l].firstChild),i[l].classList.add("has-checkbox"))}function m(){var e=document.getElementById("codeBox").value;console.log(e),runJs(e)}function g(){document.querySelectorAll("button:not([gpt-enhancer-modified])").forEach(function(e){var t;e.innerText.includes("Copy code")&&(e.setAttribute("gpt-enhancer-modified","true"),t=e.innerText.replace("Copy code","Copy"),e.setAttribute("innerHtml",t),t=document.createElement("div"),n(r`<${RunJsButton} spanElement=${e}/>`,t),addElement(e.parentElement,t,e.nextSibling),t=document.createElement("div"),n(r`<${DownloadSVGButton} spanElement=${e}/>`,t),addElement(e.parentElement,t,e.nextSibling),t=document.createElement("div"),n(r`<${ToggleEditableButton} spanElement=${e}/>`,t),addElement(e.parentElement,t,e.nextSibling))})}function a(t){return r`
              <div class="statBlock">
                ${t.standardAbilities.map(e=>r`<${function({ability:e,...t}){return r`
              <div style="${utilVars.abilityStyle}" class="ability">
                <span>${e} </span>
                <${function({name:n,options:e=[],value:t,setValue:o}){return r`
              <select class="gpt-enhancer" id="${n}Dropdown" style="${utilVars.dropdownStyle}" value="${t}" onchange="${t=>{o(e=>({...e,[n]:t.target.value}))}}">
                ${e.map(e=>r`<option class="enhance-option" value="${e}">${e}</option>`)}
              </select>
            `}} name="${e}"  options=${t.standardScoreOptions} value=${t.abilityScores[e]} setValue=${t.setAbilityScores} />
              </div>
            `}} ability=${e} ...${t} />`)}
              </div>
            `}function h(e){return r`
                <div 
                    id="toolBar" class="gpt-enhancer">
                    <${function(d){return"DND"!=d.mode&&"ALL"!=d.mode?"":r`
            <${a} ...${d} />
            ${Button("Roll D20",function(){{var e=d.setAdditionalText,n=d.standardAbilities,o=Math.floor(20*Math.random())+1,a=function(e){for(var t=0;t<e.length;t++)if(e[t].checked)return e[t].dataset.listText;return""}(function(){var e=document.getElementsByTagName("main")[0].getElementsByTagName("ol");return 0<e.length?e[e.length-1].getElementsByTagName("input"):[]}());let t;n.forEach(e=>{a.includes("("+e+")")&&(t=e)});var n=parseInt(document.getElementById(t+"Dropdown")?.value??0),i=null!=t?-1<n?" + "+n+" "+t:n+" "+t:"",n=parseInt(o+parseInt(n))||o;e(a+` Result: ${n} (${o} Roll ${i})`)}{let e="Result: {result} ({roll} + 2 WIS)",t="Complete Success",n=document.createElement("div"),o=(n.style.position="absolute",n.style.top="50%",n.style.width="100%",n.style.textAlign="center",n.style.fontSize="32px",n.style.color="white",n.style.opacity="0",n.style.backgroundColor="transparent",n.style.transition="opacity 1s",document.body.appendChild(n),document.createElement("span"));o.style.display="inline-block",o.style.width="50px",o.style.textAlign="right",n.appendChild(document.createTextNode("Rolling D20: ")),n.appendChild(o);let a,i;function l(){clearInterval(i),n.style.opacity="0",setTimeout(()=>{n.textContent=e.replace("{roll}",a).replace("{result}",a+2),n.style.opacity="1"},1e3),setTimeout(s,2e3)}function s(){n.style.opacity="0",setTimeout(()=>{n.textContent=t,n.style.opacity="1"},1e3),setTimeout(r,2e3)}function r(){n.style.opacity="0",setTimeout(()=>{n.parentNode.removeChild(n)},1e3)}i=setInterval(()=>{a=Math.floor(20*Math.random())+1,o.textContent=a},100),n.style.opacity="1",setTimeout(l,2e3)}})}            
            ${Button("Reminders",function(){d.addAdditionalText(`
Remember that a poor Result below 10 should have negative consequenses and below 5 should be really bad. Also remember to always advance the story and offer interesting options. The options should always contain one related ability in paranthesis like (STR)`)})}
            `}} ...${e} />
                    <${function(e){if("CODE"==e.mode||"ALL"==e.mode)return r`
                ${Button("Toolwindow",function(){e.toggleToolWindow()})}
                ${Button("RunJS",m)}
                ${Button("Toggle Overlay",function(){e.toggleOverlay()})}
                ${Button("Correction",function(){e.addAdditionalText(`When giving the answer, keep this in mind:
I am using Preact and Htm in this Bookmarklet code. The main app i the function TheApp and i want to keep most states in that parent 
Always do comments in the code like /*COMMENT HERE*/ never do // like //COMMENT HERE  `)})}
                ${Button("SendTest",function(){e.sendText("Tell me something interesting",e.insertTextInPrompt)})}
                `}} ...${e} />
                    ${Button("Settings",function(){e.setIsPopupOpen(!0)})}
                </div>
            `}function y(e){const[t,n]=d();return r`
                <div class="gpt-enhancer" id="overAll" style=${{display:e.isOverlayOpen?"block":"none",...utilVars.overlayStyle}}>
                <${f} id="overAllText" value=${t} onChange=${e=>n(e.target.value)}/>
                ${Button("Send Message",function(){e.sendText(t,e.insertTextInPrompt)})}
                ${Button("Toggle Overlay",function(){e.toggleOverlay()})}
                <div id="overAllAnswers"></div>
                </div>
            `}function f({id:e,style:t="",value:n="",onChange:o,class:a=""}){return r`
                <textarea id="${e}" style="${t}" class="${a} gpt-enhancer " onInput=${o}>
                    ${n}
                </textarea>
            `}function i({id:e="",value:t="",setValue:n}){return r`
                ${e}:<input class="gpt-enhancer" type="text" id="${e}" style="${utilVars.inputBoxStyle}" value=${t} onInput=${e=>{n(e.target.value)}} />
            `}function v(e){return r`
                <div class="gpt-enhancer" id="enhancerPopup" style=${{display:e.isPopupOpen?"block":"none",...utilVars.popupStyle}}>
                
                ${Button("Send Message",function(){console.log("Test")})}${Button("X",function(){e.setIsPopupOpen(!1)},{float:"right"})}<br></br>
                Mode:<${function({name:e,options:t=[],value:n,setValue:o}){return r`
              <select class="gpt-enhancer" id="${e}Dropdown" style="${utilVars.dropdownStyle2}" value="${n}" onchange="${e=>{o(e.target.value)}}">
                ${t.map(e=>r`<option class="enhance-option" value="${e}">${e}</option>`)}
              </select>
            `}} ability="${"mode"}" options=${e.availableModes} value=${e.mode} setValue=${e.setMode} />
                <${function(e){return"DND"==e.mode||"ALL"==e.mode?r`
                    <${a} ...${e} />
                    ${Button("Reminders",function(){e.addAdditionalText(`
Remember that a poor Result below 10 should have negative consequenses and below 5 should be really bad. Also remember to always advance the story and offer interesting options. The options should always contain one related ability in paranthesis like (STR)`)})}<br/>
                    <${i} setValue=${e.setCharacterName} value=${e.characterName} id="CharacterName"   /> 
                    ${Button("Save",e.saveCharacter)}
                    ${Button("Load",e.loadCharacter)}<br/>
                    <${i} setValue=${e.setDescription} value=${e.description} id="CharacterDescription" /> <br/>
                    <${i} setValue=${e.setQuestDescription} value=${e.questDescription} id="QuestDescription" /><br/> 
                `:""}} ...${e} />
                </div>
            `}o.id=t,document.body.appendChild(o),n(r`<${e} />`,o)})})})})}();})();